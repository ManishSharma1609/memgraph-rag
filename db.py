import pickle
from gqlalchemy import Memgraph
from langchain_community.graphs import MemgraphGraph

# Load the graph_documents from the pickle file
with open('graph_documents.pkl', 'rb') as f:
    graph_documents = pickle.load(f)

print("Graph documents loaded successfully.")


memgraph = Memgraph(host="127.0.0.1", port=7687)

# query = """
# MERGE (po:PurchaseOrder {id: "Po9902"}) MERGE (supplier:Supplier {name: "C.H. Robinson"})
# MERGE (service:Service {name: "Ltl"})
# MERGE (serviceCategory1:ServiceCategory {name: "Transportation Service"})
# MERGE (serviceCategory2:ServiceCategory {name: "Ground Freight"})
# MERGE (catalog:Catalog {id: "Cat5665"})
# MERGE (location1:Location {name: "Ohio"})
# MERGE (location2:Location {name: "Brampton"})
# MERGE (person1:Person {name: "Jose Tran"})
# MERGE (location3:Location {name: "Foseco Manufacturing"})
# MERGE (location4:Location {name: "Easeworkai"})
# MERGE (person2:Person {name: "Ratha Natarajanan"})

# MERGE (po)-[:HAS_SUPPLIER]->(supplier)
# MERGE (po)-[:USES_SERVICE]->(service)
# MERGE (service)-[:BELONGS_TO_CATEGORY]->(serviceCategory1)
# MERGE (service)-[:BELONGS_TO_CATEGORY]->(serviceCategory2)
# MERGE (po)-[:USES_CATALOG]->(catalog)
# MERGE (catalog)-[:SHIPS_FROM]->(location1)
# MERGE (catalog)-[:SHIPS_TO]->(location2)
# MERGE (po)-[:AUTHORIZED_BY]->(person1)
# MERGE (po)-[:SHIPS_FROM]->(location3)
# MERGE (po)-[:SHIPS_TO]->(location4)
# MERGE (po)-[:REQUESTED_BY]->(person2);

# """

# memgraph.execute(query)

graph = MemgraphGraph(url="bolt://localhost:7687", username="", password="")
# graph.refresh_schema()
# print(graph.schema)


# query = """
# MERGE (po:PurchaseOrder {id: "Po9909"})
# MERGE (supplier:Supplier {name: "C.H. Robinson"})
# MERGE (service:Service {name: "Ltl"})
# MERGE (serviceCategory1:ServiceCategory {name: "Transportation Service"})
# MERGE (serviceCategory2:ServiceCategory {name: "Ground Freight"})
# MERGE (catalog:Catalog {id: "Cat5665"})
# MERGE (location1:Location {name: "Ohio"})
# MERGE (location2:Location {name: "Brampton"})
# MERGE (location3:Location {name: "Foseco Manufacturing"})
# MERGE (location4:Location {name: "Easeworkai"})
# MERGE (person1:Person {name: "Jose Tran"})
# MERGE (person2:Person {name: "Ratha Natarajanan"})
# MERGE (weight:Weight {value: 5000})
# MERGE (quantity:Quantity {value: 5})
# MERGE (dimensions:Dimensions {value: "48 X 40 X 60 (Per Pallet)"})
# MERGE (distance:Distance {value: 327})
# MERGE (rate1:Rate {type: "BASE_RATE_PER_MILE", value: 2.5})
# MERGE (rate2:Rate {type: "FUEL_SURCHARGE", value: 0.17})
# MERGE (rate3:Rate {type: "DETENTION_RATE_PER_HOUR", value: 79})
# MERGE (rate4:Rate {type: "LIFTGATE_SERVICE_RATE", value: 0.11})
# MERGE (cost:Cost {value: 6844})
# MERGE (contractUtilized:ContractUtilized {value: 6844.44875})
# MERGE (paymentTerms:PaymentTerms {value: "Net 60 Days"})
# MERGE (currency:Currency {value: "Usd"})
# MERGE (unit:UnitOfMeasure {value: "Plt"})
# MERGE (country:Country {name: "Us"})
# MERGE (poDate:Date {value: "4/5/2023"})
# MERGE (pickupDate:Date {value: "4/8/2023"})
# MERGE (deliveryDate:Date {value: "4/11/2023"})
# MERGE (receiptDate:Date {value: "4/11/2023"})
# MERGE (specialInstructions:SpecialInstructions {details: "Liftgate Required At Delivery, Call 2 Hours Before Delivery"})
# MERGE (terms:AdditionalTermsAndConditions {details: "Standard Terms And Conditions Apply"})
# MERGE (services:AdditionalServices {details: "Inside Delivery"})
# MERGE (contract:Contract {id: "Con7317"})
# MERGE (contractValue:ContractValue {value: 6000000.0})
# MERGE (contractTerm:ContractTerm {value: 3.0})
# MERGE (contractStartDate:Date {value: "12/12/2022"})
# MERGE (contractEndDate:Date {value: "12/12/2025"})
# MERGE (fromAddress:Address {details: "20200 Sheldon Road, Cleveland, Ohio 44142 Usa"})
# MERGE (toAddress:Address {details: "Canada, L6P 0A1 (Brampton)"})
# MERGE (department:Department {name: "Marketing"})
# MERGE (costCenter:CostCenter {id: "Cc83"})
# MERGE (glAccount:GLAccount {id: "Gl3338"})

# MERGE (po)-[:SUPPLIER]->(supplier)
# MERGE (po)-[:SERVICE]->(service)
# MERGE (service)-[:BELONGS_TO_CATEGORY]->(serviceCategory1)
# MERGE (service)-[:BELONGS_TO_CATEGORY]->(serviceCategory2)
# MERGE (po)-[:CATALOG_ID]->(catalog)
# MERGE (po)-[:ROUTE_FROM]->(location1)
# MERGE (po)-[:ROUTE_TO]->(location2)
# MERGE (po)-[:TOTAL_WEIGHT]->(weight)
# MERGE (po)-[:QUANTITY]->(quantity)
# MERGE (po)-[:DIMENSIONS]->(dimensions)
# MERGE (po)-[:DISTANCE]->(distance)
# MERGE (po)-[:BASE_RATE_PER_MILE]->(rate1)
# MERGE (po)-[:FUEL_SURCHARGE]->(rate2)
# MERGE (po)-[:DETENTION_RATE_PER_HOUR]->(rate3)
# MERGE (po)-[:LIFTGATE_SERVICE_RATE]->(rate4)
# MERGE (po)-[:TOTAL_ESTIMATED_COST]->(cost)
# MERGE (po)-[:CONTRACT_UTILIZED]->(contractUtilized)
# MERGE (po)-[:PAYMENT_TERMS]->(paymentTerms)
# MERGE (po)-[:CURRENCY]->(currency)
# MERGE (po)-[:UNIT_OF_MEASURE]->(unit)
# MERGE (po)-[:COUNTRY]->(country)
# MERGE (po)-[:PO_DATE]->(poDate)
# MERGE (po)-[:PICKUP_DATE]->(pickupDate)
# MERGE (po)-[:DELIVERY_DATE]->(deliveryDate)
# MERGE (po)-[:ACTUAL_RECEIPT_DATE]->(receiptDate)
# MERGE (po)-[:SPECIAL_INSTRUCTIONS]->(specialInstructions)
# MERGE (po)-[:ADDITIONAL_TERMS_AND_CONDITIONS]->(terms)
# MERGE (po)-[:ADDITIONAL_SERVICES]->(services)
# MERGE (po)-[:CONTRACT_ID]->(contract)
# MERGE (po)-[:CONTRACT_VALUE]->(contractValue)
# MERGE (po)-[:CONTRACT_TERM]->(contractTerm)
# MERGE (po)-[:CONTRACT_START_DATE]->(contractStartDate)
# MERGE (po)-[:CONTRACT_END_DATE]->(contractEndDate)
# MERGE (po)-[:SHIP_FROM]->(location3)
# MERGE (po)-[:SHIP_FROM_ADDRESS]->(fromAddress)
# MERGE (po)-[:SHIP_TO]->(location4)
# MERGE (po)-[:SHIP_TO_ADDRESS]->(toAddress)
# MERGE (po)-[:DEPARTMENT]->(department)
# MERGE (po)-[:COST_CENTER]->(costCenter)
# MERGE (po)-[:GL_ACCOUNT_ID]->(glAccount)
# MERGE (po)-[:AUTHORIZED_BY]->(person1)
# MERGE (po)-[:REQUESTER]->(person2);
# """
# memgraph.execute(query)

# graph = MemgraphGraph(url="bolt://localhost:7687", username="", password="")
# graph.refresh_schema()
# print(graph.schema)

graph.add_graph_documents(graph_documents)